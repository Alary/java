var textForPages = ["JavaSE                         基础为什么叫基础，因为它没有门槛，人人都可以学会，因此你要学                     的比别人深，记得比别人清！-------------一个自学的程序员！                        字符串                        注意                       下面的介绍中说了字符串常量池，记得之前是在方法区中的，但是在                      jdk8 好像又放到了堆中，不管怎样，记住字符串常量池的作用即可！                           我们常说的字符串其实就是 String，String 是一个字符串数据类型，                      是一个不可变的类，字符串一旦被创建就不能再被改变，它可以用来                      接收一段字符串序列，正因为如此，有的时候 string 有可能会接收                      很大的字符串文本，这就会导致一些问题，什么问题呢？在此之前我                      们需要知道这么一回事，就是一个变量的声明定义实际上发生了什么                      呢？                          内存中的字符串                       我们你先来看一张图","我们的内存空间中有这么三样东西，分别是栈，堆和空间，这是值得                      好好探索的一个知识点，后续会专门写一篇文章，这里就针对 String                      来说一下！                       字符串属于包装类型数据，这里说一下，在 Java 中除了八种基本数                      据类型，其他都可以叫做引用数据类型，但是我们知道 String 不属                      于基本数据类型，他有点特殊，比如我们的 int，平常定义的话都是                      这样：                       int  a  =  5；                       这个叫做字面量或者直接量，凡是基本数据类型，在内存中都是存放                      在栈空间中的，但是 String 就有点特殊，我们再看下面的代码","int  a  =  5；                      int  b  =  5；                       这同时创建了两个对象，但是值都是 5，虽然一样，但是会各自在栈                      空间中开辟空间用于存放，但是字符串就不同了！                           我们知道字符串是用来接受字符串序列的，这就有可能出现接收很大                      的文本，如果文本内容相同还要再次开辟新的空间，这样会极大的浪                      费我们的空间，从而导致性能的降低，所以为了避免这样的问题，Java                     就设计了一套优化机制，也就是在空间中的方法区中定义了一个字符                      串常量池，所以每当你写下这样的代码                       Sting  name  =  \"一个自学的程序员\";                       Java 会首先将 name（用于存放具体值得地址）放到栈空间中，紧                      接着会去我们的 Java 字符串常量池中进行检索，如果发现有“一个                      自学的程序员”这些字符常量就不会再开辟新的空间进行存放，当然                      如果没有的话则开辟新空间用于存放“一个自学的程序员”                       另外在这里也说一下关于 Java 垃圾回收机制，比如我我们写上这样                      的代码                       Sting  name  =  \"一个自学的程序员\";                      name  =  \"ithuangqing\";","当你进行这样的操作，此时的“一个自学的程序员”在我们的字符串                      常量池中就属于垃圾了，因为我们的变量 name 再次被赋值了，已                      经从当初指向“一个自学的程序员”指向了“ithuangqing”，                      name 存放的是对象值得地址，但是此时我们的垃圾回收机制是不会                     回收“一个自学的程序员”，因为 Java 的垃圾回收机制不会回收字                      符串常量池中的内容。                        比较两个字符串                       如果说让你比较两个字符串是否相同，你会怎么做，你是否会这样                      做？                             String  str    =  \"我\";                                  String  str1  =  \"我\";                                  System.out.print(str==str1);                       以上代码的执行结果一定是 true，为什么呢？这里大家要知道，对                      于 str 它只是存储了存放“我”的内存空间的地址，对于引用类型的                      比较都是在比较地址，这里我们知道对于 str 和 str1，他们都是指向                      了“我”，所以他们的存放的地址是相同的，因此两者相同。                       另外大家知道什么是引用类型吗？在 Java 中除了八种基本数据类                      型，其他都是引用数据类型，他们的比较都是在比较地址，这里的                      str 和 str1 就是一个引用类型的变量，他们呢分别存放“我”这个字                      符的内存地址。","不过，大家再看看下面的代码：                         String  str    =new  String(\"我\")  ;                                  String  str1  =  new  String(\"我\")  ;                                    System.out.print(str==str1);                        大家知道这个打印的结果是什么吗？结果是 false，这是为什么呢？                       大家要记住了，凡是 new 都是创建新对象，开辟新空间，这样的话                      str 和 str1 所指向的空间地址就是不同的了，因此如果我们要比较两                     个字符串是否相等，一定要使用字符串提供的 equals 方法，如下：                           String  str    =new  String(\"我\")  ;                                 String  str1  =  new  String(\"我\")  ;                                  System.out.print(str.equals(str1));","面试题                                                        字符串拼接产生垃圾                                 String  str  =  \"一个自学的程序员\";                                     String  str1  =  \"一个\"+\"自学的\"+\"程序员\";                       我们来看上面的代码，这里大家要注意了，在以后的代码书写中，尽                      量不要写这样的代码，因为这种字符串的拼接会产生垃圾,我们看                      str1，首先你要知道，这个拼接的过程是非常快的，首先，一个空间                      存“一个”，接着立马和“自学的”进行拼接，当拼接成“一个自学                      的”的时候之前的“一个”就成了字符串常量池中的垃圾，一次类                      推，“一个”，“一个自学的”，“一个自学的程序员”都会相继成                     为字符串常量池中的垃圾！                       这点大家要知道，因为有些人是不知道的。","再看个问题（冷门）                             String  str  =  \"一个自学的程序员\";                                      String  str1  =  \"一个自学的\";                                      String  str2  =  \"程序员\";                                      String  str3  =  str1+str2;                                     System.out.println(str  ==  str3);                        大家看这个，结果是 true 还是 false，                                     结果是 false，所以这里大家要记住，字符串拼接得到的 str3 和 str1                      是不一样的，他们的地址不同。这个额了解即可                       到这里你是否会觉得关于字符串的拼接好像有空，的确，字符串在拼                      接这块是有问题的，于是为了弥补字符串拼接的问题，就有了                     StringBuffer 和 StringBuilder！这两个可以解决字符串拼接的问题，                      我们来拿 StringBuffer 举例说明                       StringBuffer  buffer  =  new  StringBuffer();","与 String 不同的是，创建 String 对象会直接在堆空间的字符串常量                      池中，而 StringBuffer 会先在堆空间注意不是常量池中开辟新的空                      间，通过 StringBuffer 的  append 方法将字符串先进行拼接，之后，                      当你将拼接之后的 StringBuffer 转换成 String 的时候，也就是当你                     写这些代码的时候，这些拼接好的字符串会立马进到字符串常量池                      中，而之前单独开辟的 StringBuffer 的  空间中的字符串会在某一阶                      段被 Java 虚拟机的垃圾回收机制给回收                                                     看这个图来理解一下，我觉得我画的已经很形象了！                       那么 StringBuffer 和 StringBuilder 有什么区别呢                       •  StringBuffer 线程安全                       •  StringBuilder 非线程安全","其他两者的用法是完全相同的，在实际的开发当中，我们一般都是用                      StringBuilder，也就是非线程安全的。性能高且快，这两个下面会                      详细介绍                        String 的构造方法                       接下来我们先来看看 String 的构造方法。对 String 的学习我们可以                     借助 API，比如学习 String 的构造方法，我们可以去查看 API：                                                             这些都是 String 的构造函数，我们选择几个说一下，其实这里大家                      可以发现，对于构造函数的参数，byte 类型居多。                       对于第一个构造函数不用说了，首先大家要知道创建一个字符串的方                      式有以下两种：","String  str  =  \"abc\";                        String  str1  =  new  String(\"abc\");                       大家看上面的代码，其实这两者是有差别的，大家要知道，凡是 new                      出来的对象都会放在堆空间中，下面我们来看一张图。                                                    str 和 str1 都是用于存放地址的，首先都会放到栈中，对于 str 先会                      去方法区中的字符串常量池中搜索看看有没有“abc”如果没有的                      就会在字符串常量池中创建，然后 str 指向这个在常量池中创建的                      “abc”，对于 str1，首先这个 str1 会先存放在栈中，然后同样会去                      方法区中的字符串常量池中搜索有没有“abc”，这个发现有，就会                      在堆中创建对象存放这个“abc”，而此时这个 str1 是指向这个堆中                      的“abc”。                       好了，来继续看我们的构造函数，先说两个参数为 byte 的：看代码","byte[]  bytes  =  {97,98,99,100};                            String  s  =  new  String(bytes);                         System.out.println(s);                           String  s1  =  new  String(bytes,1,2);                         System.out.println(s1);                       输出结果是                                         对于第二个，1 和 2 表示从第一个开始，然后取两个！                       接下来再来看一个参数是 char 的                       char[]  c  =  {'一','个','自','学','的','程','序','员'};                                            String  s  =  new  String(c);                                            System.out.println(s);                       输出结果为","这个就不多说了，大家看看代码和输出结果基本就知道什么意思了！                          String 的 API（这个要熟练使用）                       字符串 String 的本质是一个连续的 char 数组，比如                       String  name  =  \"一个自学的程序员\";                       它实际上就是 char[]{'一','个','自','学','的','程','序','员'}                        获取字符串长度                          System.out.println(string.length());                       这个简单，看代码即可                         获取字符串中单个字符                       这个也比较简单，看代码就可以知道怎么使用","System.out.println(\"第一个字符：\"+string.charAt(0));                                      System.out.println(\"第二个字符：\"+string.charAt(1));                                      System.out.println(\"第三个字符：\"+string.charAt(2));                        转大小写                       继续看代码                          String  ab  =  \"abcd\";                                      String  AB  =  ab.toUpperCase();                                      System.out.println(AB);                                      System.out.println(AB.toLowerCase());                                      //输出结果                                      //ABCD                                     //abcd                       接下来我们再来看看 String 的替换，也就是 replace！                         替换                       我们讲替换，一般都是指的字符串的 replace，这里面也有大家需要                      值得注意的地方，首先，我们来看下面的代码：                          String  str  =  \"一个自学的程序员\";                                      String  str1  =  str.replace(\"一\",\"二\");                                      System.out.println(str1);","上面的代码就是执行了一个简单的替换操作，使用到了字符串的                      replace 方法，这个方法接收两个参数，第一个是你要替换的原始数                      据，第二个参数是你要替换的新数据，这里将原本字符串里的“一”                      替换成了“二”，相信着你一定能够看得懂，以上代码输出结果是                                      下面我们再来看一下如下代码                          String  str  =  \"一个自学的程序员\";                                     str.replace(\"一\",\"二\");                                      System.out.println(str);                       这段代码跟上面的代码的却别就是这个代码中替换后的字符串没有                      使用新的字符串取接收，我们来看打印结果                                       可以看到，结果似乎并没有像我们想的那样，这里大家要注意的是，                      当你写下了下面的代码","str.replace(\"一\",\"二\");                       就会产生一个新的字符串“二个自学的程序员”，而且这个字符串是                      存在一个新的内存空间的，也就是与原本的 str 已经不属于统一内存                      空间了，所以我们必须使用新的字符串取接收这个新的字符串。                          查找                       接下来我们来看看查找，对于查找，同样游戏额小知识需要我们特别                      注意，先来看一段代码！                       String  str  =  \"一个自学的程序员\";                                      int  index  =  str.indexOf(\"的\");                                      System.out.println(index);                       这是查找的最基本操作了。也就是使用 indexOf 取进行关键字的查                      找，这里大家要记住的是：                       1.  如果查到返回关键字的索引位置，否则返回-1                       2.  查找是自左向右进行的                       接下来我们再来看看接收两个参数的 indexOf：                       String  str  =  \"一个自学的程序员\";                                      int  index  =  str.indexOf(\"的\",3);                                      System.out.println(index);","这里多了一个参数，这里他的数值是 3，那这个是什么意思呢？这里                      的 3 代表从字符串的第三个位置开始查找，同样是找得到的话就会返                      回关键字的索引位置，如果找不到就返回-1.                       我们再来看一段代码                         String  str  =  \"一个自学的程序员\";                                      int  index  =  str.lastIndexOf(\"的\");                                      System.out.println(index);                       这个 lastIndexOf 是什么意思呢？它也是查找，只不过它是自右向左                     进行查找的，也就是所他会从“员”这个位置开始向左查找，你想一                      下这个打印结果是什么                                       结果同样是 4，可千万别认为是 3，到这里就需要告诉大家一个重要                      的知识了                       字符串中关键字的索引位置是不会变化的，无论你从左边还是右边开                      始查找，得到的相同关键字的索引位置始终都是相同的。                       也就是说，对于字符串“一个自学的程序员”的索引位置如下，始终                      不变。","如果查找的关键字在字符串中多个位置都有，那么会遵循就近，也就                      是会返回最近的哪一个关键字位置的索引！                        去空格                       接下来将一个简单的，就是去空格，对于这个看一下代码就行了。                               String  str  =  \"      一个自学的程序员\";                                      String  str1  =  str.trim();                                      System.out.println(str);                                      System.out.println(str1);                       看一下结果，一目了然","charAt 返回制定索引处的 char 值                        看代码                        String  s  =  \"abc\";                                            char  c  =  s.charAt(1);                                            System.out.println(c);                        输出结果为                                            以 xxx 结尾                       看代码                             String  s  =  \"abc\";                                               System.out.println(s.endsWith(\"c\"));                                            System.out.println(s.endsWith(\"c  \"));                       看结果","这里就要注意了，有空格是不行的。                        字符串的分割                       看代码                         String  s  =  \"a,b,c\";                                            String[]  split  =  s.split(\",\");                                            for  (int  i=0;i<split.length;i++){                                                    System.out.println(split[i]);                                            }                       看结果","截取字符串                        看代码                            String s = \"一个自学的程序员\";                                      String substring = s.substring(2);                                      System.out.println(substring);                                      String substring1 = s.substring(2,5);                                      System.out.println(substring1);                       看结果                                       到此结束，关于 string'的方法还有很多这里不再一一演示，具体的                      学习大家刻印借助 api 来练习记忆！                        StringBuffer 和 StringBuilder                       首先大家需要知道什么是 StringBuffer 和 StringBuilder，这个是对                      String 的一个补充，因为 String 在有些方面是有些缺憾的，比如说                      字符串的拼接就不能使用 String，会产生大量垃圾，但是使用                      StringBuffer 和 StringBuilder 就可以，我们先来看 StringBuffer","工作原理                        对于 StringBuffer 和 StringBuilder，他们两个会事先申请一块内存                     空间（创建字符串缓冲区对象）用于存放字符序列，默认的初始化容                      量是 16，如果初始化容量不够用的话就会自动扩容，所谓的扩容就                      是新建一个更大的空间，将原来的字符序列给拷贝过来，但是这样就                      会降低性能，那么如何优化呢？                        优化建议                       我们在使用 StringBuffer 和 StringBuilder 之前就要实现预估一下所                      需要存储的字符序列有多大，提前指定 StringBuffer 和                      StringBuilder 的容量大小，减少字符序列由于扩容进行的拷贝操作，                      从而提升效率                             StringBuffer stringBuffer = new StringBuffer();                                      StringBuffer stringBuffer1 = new StringBuffer(100);                          StringBuffer                       在实际代码中使用                              //创建字符串缓冲区对象                                      StringBuffer stringBuffer = new StringBuffer();","String[] s = {\"一个\",\"自学的\",\"程序员\"};                                       for (int i=0;i<s.length;i++){                                             if (i==s.length-1){                                                      stringBuffer.append(s[i]);                                              }else {                                                      stringBuffer.append(s[i]);                                                      stringBuffer.append(\",\");                                              }                                      }                                      System.out.println(stringBuffer);                         输出结果为","StringBuffer 和 StringBuilder 的区别                        StringBuffer 是线程安全的，可以在多线程的环境下使用不会出现问                     题，而 StringBuilder 是非线程安全的，在多线程环境下使用可能会                      出现问题。                       至于什么是线程安全，请看后续《多线程》的教程笔记！","JavaWeb                           一、Tomcat                        简介                       本教程最大的特点就是以一个自学者的角度去提出问题解决问                      题，因为是站在一个自学者的角度去叙述知识点，因此对大家来                      说更容易理解，这次的  Tomcat  教程笔记源于我在学习过程中的                      笔记以及个人的理解，最后加工整理而来，主要讲述了关于                      Tomcat  的一系列知识，包括在  eclipse  中搭建  web  项目的应                      用，Tomcat  的安装，常见错误，以及一些配置问题，其中我更                      是查阅很多资料添加了“可以耍酷的虚拟主机”这一内容，相信看                     过之后又  get  到一项新技能，总的来说，如果你要学习  Tomcat，                      这个教程足以，而且有任何问题都可以咨询我，当然不足之处还                      望大家指出，希望通过大家的共同努力完成一个真正适合自学者                      的  Tomcat  学习手册！","关于作者                       大家好！我叫黄庆，一个自学的程序员，目前主要集中在  Java  和                      Android  领域，致力于为大家提供简单易懂真正能够学到知识的自                      学教程，大家在学习本教程的时候有任何不明白的地方都可以与                      我联系，我愿与你一起进步！                                                 微信：H653836923                                    还可以关注我的公众号，掌握最新动态！                                                                           越努力越幸运！                             （一）、  CS  和 BS  架构                       关于  CS  和  BS  架构相信大家也都听说过，或许只是这个概念                      没有那么清楚，其实无论  CS  还是  BS  都是软件架构的两种不                      同的表现形式而已，我们看下面的简单介绍！","C/S：Client/Server：客户端和服务端                       B/S：Browser/Server：浏览器和服务端的架构（通过浏览器访问的应                      用）                             1、C/S  简介                       采用  CS  架构的一些软件一般都是运行在电脑桌面上：比如                      QQ，一些视频软件的客户端。等                      开发语言：VB，VC++，C#，Java  中的  swing，awt  等                             1.1、特点                       一般的，服务端仅仅是安装一个数据库和数据存储，所有程序的                      代码（功能和界面）都编写在客户端软件中（把所有的业务逻辑                      都编写在了客户端），界面渲染也在客户端                            1.2、架构的优缺点                        优点：直观，用户体验好，界面美观，安全性要高一点。等                       缺点：升级需要重新安装，移植性较低，开发和维护成本要高。","2、B/S  简介                       采用这种架构的软件一般都是通过浏览器访问，比如门户网站，                      管理系统等。                      其实  B/S  属于特殊的  C/S，因为浏览器就是一个特殊的客户端。安                      装在电脑上。                      开发语言：JSP,PHP,ASP  等                          2.1、特点                       在服务端编写代码，所有的业务逻辑都由服务端完成，客户端                      只负责界面的渲染展示                           2.2、优缺点                       优点：可移植性高，开发和维护较好                        缺点：用户体验不够好，界面不够丰富，安全性很低。","3、综合（瘦富客户端）                        3.1、瘦客户端                       也即是传统的  BS  架构，服务端主要负责业务逻辑的处理，而                      客户端                       则是负责页面的渲染，其中的优缺点也即是上面说的。                              3.2、富客户端                       富客户端其实是  BS  架构和  CS  架构的一种结合，这种客户端                      的特点就是界面华丽，综合两种架构的优点，在富客户端中，                      服务端依然是主要负责业务逻辑的处理，区别在于客户端，不                      像传统的  BS  架构中客户端只负责界面的渲染，头同时客户端                     还会处理少量的业务逻辑。                           用到的开发技术：Extjs，Flash，EasyUI，JavaFX  等。使用的语                      言是                       JavaScript  或者  action script","（二）、什么是服务器（Tomcat）                        服务器一般分为软件服务器和硬件服务器，总的来说服务器就是                        提供服务的，就好比，你可以给服务器要点什么，他可以给你返                        回点什么，你也可以在他那存放点什么，没有它有些事你还做不                       了。接下来我们就软件服务器和硬件服务器简单做下介绍。                         1、软件服务器                         软件服务器软件服务器其实就是一个软件，这个软件提供了  BS                     应用运行的环境。也就是说没有这个软件，采用  bs  架构的软件                      就无法运行。                        2、硬件服务器                       这里的硬件服务器其实就可以理解成我们平常说的主机，其实就是一台电脑，只不过这台电                    脑上安装了软件服务器                      （三）、Tomcat  通关                        3.1、什么是 Tomcat                        Tomcat  其实就是一个软件服务器，当我们的电脑上安装了                      Tomcat，那么我们的电脑就成了一个硬件服务器，也可以说是主                      机，它为我们提供了一些必要的运行环境。","3.2、Tomcat  的目录结构                        好吧，我决定先来说说  Tomcat  的目录结构。                        bin  目录：这里面主要是  Tomcat  的工具，比如启动，关闭等。                      conf：这个目录里面是  Tomcat  的配置文件                       lib：这个是非常重要的一个文件夹，里面存放着  Tomcat  的核                      心  jar  包以及一些依赖的  jar  包，其实就是放  jar  包的地方。                      logs：日志文件                        temp：这是一个临时目录，里面会有上传文件时的临时文件。                       webapps：默认情况下，这是部署项目的路径。                        work：英文单词工作的意思，所以这是一个工作目录，里面主                      要装  JSP  翻译成  Java  文件的代码。","3.3、Tomcat  的安装                                                                                              对于  Tomcat  的安装最重要的是配置，当你下载好一个  Tomcat                      （下载如图），并且解压完成你会得到一个  Tomcat  的文件夹，                     打开就是上面介绍的那几个文件夹了，在上面也说过，Tomcat  的","启动实在  bin  目录下的，直接说了吧就是  startup.bat，你双击这                      个文件就是启动  Tomcat，但是往往你会遇到这样的问题“一闪                      而过”                      这个时候我们一般很想知道，这是为什么啊，我们可以通过  dos                     来查看原因，在此文件夹下打开  dos  窗口输入  startup.bat  然                      后回车，你会看到这样的提示                                     什么意思呢？大概意思就是缺少  JAVA_HOME  或者  JRE_HOME                                   的运行环境导致这个应用无法执行，嗯就这样理解。                      现在知道是什么问题了，那就要去解决这个问题从错误的原因                      我们知道应该去配置  JAVA_HOME  或者  JRE_HOME,在此之前我                      们先要来说以                        下这个  JAVA_HOME  和  JRE_HOME  到底是个什么东西，有什                     么用？                        首先这两个东西都是一种约定，就这样的，是一个约定好的变                      量，当某些程序需要用到的话就会默认的去找  JAVA_HOME  或                      者  JRE_HOME，然后拿到他们的值，这里就拿我们的  Tomcat","来说，当你双击  startup.bat  来启动  Tomcat  的时候，它就会默                      认去取  JAVA_HOME  或者                      JRE_HOME  来用，另外  Tomcat  的运行是不需要  JDK  中的工                      具  的  只  需  要    JRE  来  提  供  运   行  环  境  即  可  ，  也  即  是  说  要  想  启  动                     Tomcat  必须要有                      JAVA_HOME  或者  JRE_HOME，当两者都不为空的时候默认使用                        JRE_HOME。                       那么  JAVA_HOME  具体值的是什么呢？这个想必大家都很清                      楚，通常它指的就是  JDK  的目录，如果需要  JDK  的话，大部                      分 程 序 都 会 默 认 的 去 环 境 变 量 中 取 这 个 值 来 用 ， 同 样                      JRE_HOME  就是指的  jre  目录了，当程序不需要  JDK  而需要                      Java  的一个运行环境时就会取这个值了。相信说到这里你已经                      明白的差不多了，接下来我们就去配置这个                      JAVA_HOME  吧！（因为  JAVA_HOME  比较全能，所以选择配置                      它），如果觉的接下来我会直接告诉大家怎么配置那你就错了。                        3.3.1、在系统环境变量中配置                        首先，最常规的就是在我们的电脑中的系统环境变量中取配置                        JAVA_HOME  了，这个想必大家都会，这里不多说，直接上图。","OK,经过这样的操作就可以正常启动  Tomcat  了。                         3.3.2、在 startup.bat  中配置                         在系统环境变量中配置是一种方法，这个大家都知道想必也都                      会，这就没法装逼了，我们需要知道一种有那么几个人不知道                     的方法，接下来我们把系统环境变量中配置的  JAVA_HOME  删                       除掉，接下来我们将  startup.bat  以记事本方式打开。如下图","在图中所示位置添加上  set  JAVA_HOME=D:\\Java\\jdk_8u131  然                      后保存即可。同样可以正常启动  Tomcat。                       如果别人不知道这个方法，发现你的系统环境变量中没有配置                       JAVA_HOME  但是却可以启动  Tomcat，你说他会怎么想，另外                      在  startup.bat  文件的最后加上一个  pause，你猜有什么效                      果？","3.3.3、如何判定 Tomcat  启动成功                        我们可以通过浏览器访问来确认服务是否启动成功，那么如何访问                      呢？我们可以通过如下两种方式                      http://服务器所在主机的  IP:服务器的端口号/资源名字                       http://服务器所在主机的名字:服务器的端口号/资源名字                             一般我们的服务都是在本机，因此可以通过如下方式访问  http://                     本机的  IP:服务器的端口号/资源名字  http://127.0.0.1:服务器的端                      口号/资源名字  http://localhost:服务器的端口号/资源名字                               我们这里通过  http://localhost:服务器的端口号来进行测试，这                      里要知道  Tomcat  的默认端口号是  8080，这个怎么看呢？我们                      再次点击  startup.bat","在浏览器中输入  http://localhost:8080/当看到如下这个界面表                      示  Tomcat  安装成功且已经启动                                              这个时候你要注意，以下界面是不能关闭的。","4、Tomcat  常见错误                          4.1、没有成功启动 Tomcat  就开始访问                        这样的后果是会导致无法显示此网页，比如你双击  startup.bat  启                      动了  Tomcat，但是手贱一下又给关了，这样你去访问网页的时候                     就会出现这个情况","所以一定要记住，启动了  Tomcat  之后就将它最小化吧。                         4.2、出现 404  的错误                        这是一个非常经典的错误，我们先来看下这个错误界面                                            之所以会出现这个界面是因为你访问的页面不存在，另外不知                      道大家有没有这样的疑惑，我们之前说验证  Tomcat  是否安装                      成功访问  http://localhost:服务器端口号/资源名字，但是我们访","问的时候只是输入了  http://localhost:8080,那么这个资源名字                      呢？其实完整的路径是这样子的                                                 只不过这里的  index.jsp  被默认隐藏了，也就是即使我们不写                      他也是取默认打开这个界面，因此当你输入的界面不存在就会                      出现  404  的错误啦，比如这样","4.3、重复启动，端口冲突                        这个是什么意思呢？你如说你现在已经启动一个  Tomcat  了，                     你又双击  startup.bat，结果会发现一闪而过，这个时候你也许                      会疑惑，这是怎么回事，这个时候你最好先看看是不是已经有                      一个  Tomcat  被启动了，想准确的查看错误信息我们可以去查                      看错误日志，还记的错误日志在哪吗？                                                   日志文件是在  logs  目录下的，我们找到错误日志文件打开它，                      翻到最后","我们会发现这里有一个经典的错误，Tomcat  的端口已经被占                     用，端口冲突。                            4.4、不能乱改  Tomcat  中配置文件的结构                       这个一般就是我们不小心将  Tomcat  文件中的配置文件修改                      了，当发生这种情况，我们一般要先去查看日志文件，从文件                      中去查找原因然后再修改，这里我们做一个例子。我们打开配                      置文件夹  conf，然后将里面的配置文件  server.xml  文件稍作修                      改来模拟我们不小心改动了配置文件导致出错。","我们试着将这个</Server>删除，然后保存我们再运行  Tomcat  试试，                      这时候会一闪而过，明显是出问题了，接下来我们去查看日志文件。                                                 我们可以看到，给出的日志还是非常相信的。                                5、关于  Tomcat  的端口和服务器                        5.1、如何修改默认端口                       我们知道  Tomcat  的默认端口是  8080，这样我们在访问的时候                      就需要这样  http://localhost:8080/资源名字，我们知道  http  协                      议的默认端口是  80，而我们在进行网络访问的时候，默认都是                     遵循  http  协议的，因此如果我们的  Tomcat  的端口是  80  的                      话   ，  我   们  在   访  问   的  时   候  就   可  以   不  写   端  口   号   了  也   就  是","http://localhost/资源名字，接下来我们来修改一下  Tomcat  的默                      认端口。这个该怎么修改呢？我们打开  Tomcat  的配置文件，                      然后打开  server.xml，可以看到这些                                           没错我们就可以在这里修改默认端口，我们将它修改成  80，然                      后保存。这个时候我们再像如下方式访问就是不成功的。                                                                                                              必须是如下这个样子","好吧，我相信你已经懂了。                          5.2、将  Tomcat  作为服务器安装在电脑上                        首先我们要知道  Tomcat  的安装有两种形式，一种就是我们之                      前一直在讲的解压免安装版的，这个解压之后，配置好环境变                     量也就是                      JAVA_HOME  就可以直接使用了。                        另外一种是安装版的，这个有一定的好处就是可以设置成开机自启，                      这样就省去了我们每次启动  Tomcat  的麻烦。                      那么如何将我们的  Tomcat  作为服务器安装在电脑上呢？其实                     也很简单，我们一起来看看，在  Tomcat  的  bin  目录下有一个                      service.bat  文件，这个文件就代表安装和卸载，我们在当前目录","下打开  CMD，这里给大家说一个技巧，不知道大家平常如果要                      在当前目录下打开  cmd  都是怎么做的，是不是  win+r  输入                      cmd，然后使用  cd  切换到当前目录下呢？如果你是这样那就太                      落                                    后                                    了                                                     这个技巧我一般人还不告诉他们呢？进入  dos  窗口之后我们                     执行以下操作                                                这样我们就成功安装了，怎么验证呢？我们打开服务界面","可以看到  Tomcat  已经作为我们的服务安装在了本地，当然                     我们还可以使用  service remove  来卸载  Tomcat！                         5.3、tomcat  的安全配置                       我们先来看下这个界面                                                      肯定不陌生吧！你们知道这个页面对应  tomcat  中的哪个文件                      吗？我们来看看","其实我们访问  localhost  就是默认打开的  ROOT  这个文件夹中                                         的内容，那么我们再来看这个页面上的其他内容                                                                               比如这个  Documentation，我们点击","这就是  tomcat  的文档内容。那么这个页面有对应  tomcat  中的                      哪个文件夹呢？                                                                        对就是这个  docs。接下来我们看这个、","点击下看看                                                   竟然让输入用户名和密码，这个好像真不知道，怎么办，还是先                       取消吧                                       哎呦，出现了这个页面，仔细一看，很有用啊，意思就是我们可                      以自","己设置账户密码，去哪设置呢？在  conf/tomcat-users.xml  这个里面，                      好，咱去看看                                                                                                        就是这个，打开它","是这个样子的，然后怎么办，我们再看之前的那个  401  界面，                                                               其中提到好像要输入这些内容                                                                              好，我们直接复制过去                                           然后保存，我们试着这个账户和密码去登录一下试试                                                                    对了，tomcat  可是要重新启动才行的。","看见没，登录进来了，而且别有洞天啊。                                                                                    我  们  点                      击这个                                      你看到了什么？这其实就是部署在  tomcat  中的项目也就是这                                                                                                  些                                                                           好啦，差不多了，好好理解理解！","6、如何配置 Javaweb  项目                        6.1、标准 web  结构                                                     根据这个图要能够手动创建一个  web  项目文件，其中的                      web.xml  文件中的内容可以到  Tomcat  中的示例文件中去                      拷贝，然后只保留根部文件即可，也就是这个","6.2、使用 eclipse  搭建一个干净的 web  项目                                                这里面有两点需要注意，第一就是  web.xml  这个文件不要忘                      记了，可以去  tomcat  的示例文件中去拷贝，最后要是图中那                      个样子，第二点就是一般的  Java  项目，编译后的文件都会存                      放在  bin  目录，这个可以怎么看呢？我们打开这个项目的根                      目录                                                                                      打开这个文件，会看到这样的","但是这里我们要去改变这个路径，怎么改呢？在你的项目名字                                   上右击选择  build path，然后选择最后一个配置  path                                                                    紧接着选择我们项目下的  WEB-INF  中的  classes  作为此路径","点击  ok，我们再看看此时的路径                                      而且你发现没，此时我们项目中的  classes  这个文件也没有了。                      当搭建好一个纯净的  web  项目时，我们怎么去部署项目                      呢？我们先来写一个  html  文件，就叫做  index.html，也许                      你会问为什么叫  index  啊，其实叫什么都无所谓，但是你要                      知道在访问的时候会默认去访问叫  index  的文件，还记得之","前 我 们 启 动   Tomcat  的 时 候 去 浏 览 器 访 问                      http://localhost:8080/index.jsp  吗?不过我们当时可是没有写                      index.jsp  啊，但是依然能够成功访问，这是为什么呢？因为                      浏览器会默认去打开  index.jsp  这个文件！                     好了，言归 正传 ，开始在你 的   web  项目 中新建 一个                      index.html  文件吧！然后写上一句话。                                                 要看清了，是在  webapp  目录下新建  html  文件。然后我们怎么去访问这个界面呢？接下                    来我们就来看一下最原始的页面是如何通过  tomcat  被访问的。我们先找到我们  tomcat  的                    安装目录，找到这个文件夹","打开它                                         接下来，我们启动  tomcat，然后访问如下网址","这个时候我们就可以发现，这个网址打开的就是  tomcat                     中  webapp  中的  ROOT  中的  index.jsp。                      当我们去访问如下网址的时候                                               其实就是访问的  examples  中的  index.html，好，到这里也                       许你就明白了，然后我们将我们在  eclipse  中创建的  web                     项 目 的 根 目 录 也 就 是   webapp  复                      制  到     tomcat  中      的                      webapps  中，复制如下文件夹","然                      后复制到如下目录                                             然后访问                                        看到没，看到没，其实这里的完整路径应该是","到这里，你应该知道一个  web  项目是如何部署在  tomcat  上然                      后运行起来的了，不过，我们使用  eclipse  不能还这样做吧，那                      肯定不是啦！                         6.3、安装 eclipse  的 tomcat  插件                       安装  eclipse  插件的方式有很多中，其中有一种连接的方式，                      这一块我认为不是什么大问题，在  Java  中需要研究的地方                      太多了，我们哪有那么多时间去一一研究，所以像安装插件                     这种事我们掌握一种二其他的有所了解就行，这里我们就选                       取将插件拷贝到  eclipse  种特定文件的方式安装插件                                           这个  tomcat  插件安装完成之后会在  eclipse  中显示三只                      猫","这三只猫分别代表打开，关闭和重启，但是如果你先在去点                      击这三只猫会出现这样的提示                                           这是因为我们只是把插件安装好了，但是并没有连接到我                                       们的  tomcat，因此需要做一下配置，操作如图","紧接着                                                                                                                                             这                    时候我们再点击第一只猫启动  tomcat","成   功                       启动。                                7、部署 web  项目                         首先什么是部署  web  项目呢？我们需要明白的是部署项目                      其实就是将我们创建的  web  项目部署在  tomcat  服务器                      中，这样我们才可以通过浏览器去访问我们写的页面，我们                      在之前也提到过一种部署  web  项目的方式，就是将  web                     项   目  中   的     webapp  整 个 文 件 夹 拷 贝 到   tomcat  中                       的                      webapps  中，这样我们就可以通过拼凑访问路径进行访问                      了，比如我们的  web  项目中在  webapp  下我们写了一个                      html  页面，那么我们如何访问这个页面呢？","我们可以将  webapp  整个文件拷贝到一下目录中去                                                然  后  我  们  启  动  tomcat  ，  在  浏  览  器  中  输  入                      http://localhost/webapp/index.html  就可以访问到我们写的                      那个页面了。                      直接说了吧，以上这种方式可行是可行但是会有很多缺点，                      我们在实际开发中可能也不会用这种方式，那么我们需要使                      用哪种方式去部署项目呢？","7.1、在 server.xml  中去配置部署 web  项目                       这个方式是我们比较常用的方式，具体该怎么做呢？我们打开                      tomcat  中的  conf  文件夹，打开其中的  server.xml，找到                      Host，在这个里面进行如下配置。                                                     这里主要配置了两个东西，第一个是  docBase，这是一个                      路径，就是我们  web  项目中  webapp  的路径，这个路径可                      以这样获取                                                                                                然  后   可                      以看到","这个路径就是  docBase  的路径，另外一个是  path，这个是                      干什么的呢？首先你要明白，在  tomcat  我们可以部署多个                     项目，那么这个  docBase  就有可能相同，那么我们该如何                      区分要访问的是哪个项目呢？就通过这个  path，这里有点                      像是别名的意思，我这里的  path  写成了  ithuanqging，然后                      保存。                      经过这样的操作，docBase  所指的这个路径的项目就相当于                      部署到了  tomcat  的服务器中，接下来我们去访问我们写的                      index.html  这个文件，这个时候按理说我们是可以通过访问                      http://locahost:80/index.html  直接访问的，可是呢？","无法访问，显示  404  无法找到页面，这是为什么呢？因为                      你没有用到我们的别名  path  啊！其实我们应该这样访问                                     这样就可以正常访问了，所以，来，再看一遍这个配置                                                  你以为到这里就结束了吗？你没觉得每次还要输入这个  path  的名称才能访问很不爽吗？","我们先来看下我们这样配置之后启动  tomcat  的时候给了                      我们一个警告                               这个警告告诉我们这个  path  要么是空字符串，要么在字                      符串前面加一个反斜杠，我们先来加一个反斜杠试试（配置                      发生改变要重新启动  tomcat）                               然后依然去访问看看                                                                                                       没啥                     影响，正常访问，那么我们再来试试空字符串                                                                                                                然                    后再去访问，","这是怎么回事？你发现没，当我们把  Ppath  设置成空字符                      串 的 话 我 们 再 去 访 问 的 时 候 是 不 是 就 不 需 要 再 写                      ithuanqging  这个别名                       了，是不是就应该访问  http://localhost:80/index.html  这个地址                      呢？我们试试                                      好完美！接下来总结一下，最终的配置一般是这个样                      子的                                  然后我们可以直接这样访问","好了，部署项目就是这些了！                                           8、可以耍酷的虚拟主机（tomcat）                        我们知道，当我们成功启动  tomcat  的时候，我们可以访问                       http://localhost:80/index.html  这个网址去打开这个  index.html                     文件，但是不知道大家有没有想过，这个  localhost  是什么玩意                      啊？为什么要写  local host  啊，想必大家还记的验证  tomcat  是                      否启动成功要通过浏览器访问去验证，一般的访问网址格式是                      这个样子的  http://本机  ip  地址:端口号/资源名字","我们现在启动  tomcat，然后去访问  http://127.0.0.1:80/index.jsp                                             出现的是这个页面，这时候我们输入的那个网址在浏览器中是这                      个演这个样子的                                    而且只输入一个  127.0.0.1  也是可以访问到的，前提是  tomcat                     成功启动                                               这个时候你要知道为什么只输入一个  127.0.0.1  就可以实现访                      问，因为  tomcat  的默认端口被我们改成  80  了，而浏览器访问","统一遵循  http  协议，而  http  协议的默认端口正是  80  所以不                      写也可以，而  index.jsp  一般都会默认打开这个叫  index  的文                      件，因此不写也可以，所以说一切都是默认惹的祸，你可要清                      楚了。                       这个时候我们再想，为什么输入  127.0.0.1  可以访问，输入                      localhost  有相同的效果呢？我们来找到我们电脑中的  host  文                      件                                        打开它                                                   我们看到最后一行似乎明白了啥，在此之前我们需要先来了解一                      下这个  hosts！","Hosts  是一个没有扩展名的系统文件，可以用记事本等工具打                      开，其作用就是将一些常用的网址域名与其对应的  IP  地址建立                      一个关联“数据库”，当用户在浏览器中输入一个需要登录的                      网址时，系统会首先自动从  Hosts  文件中寻找对应的  IP  地址，                     一旦找到，系统会立即打开对应网页，如果没有找到，则系统                      会再将网址提交  DNS  域名解析服务器进行  IP  地址的解析。                      也就是说  localhost  其实就是对应着  127.0.0.1  的，因此我们不                      管输入哪一个效果都是一样的。                      现在我们再来谈一下我们的  tomcat  虚拟主机，首先你要明白这                      样一个概念，tomcat  是一个软件服务器，当你在你的电脑中成                      功安装一个  tomcat  并且成功启动以后，这时你的电脑就成为了                      一个硬件服务器，也就是一个主机（安装了软件服务器的电脑）                      这个时候我们再想，验证  tomcat  为什么使用的是  localhost，                      为什么不是其他的，我们来看看  tomcat  中的这个文件                                                                                  又是这个文件，好吧，打开它","看到没，其实这里的  Host  就代表虚拟主机，而我们的名字就                       是  localhost，因为在我们的电脑中  localhost  对应着  127.0.0.1                     啊，下面我们来做一下测试                                                       我们将  name  从  localhost  改成  ithuangqing，然后是不是可以                      直   接   输   入     ithuangqing  进       行  访   问   呢   ？   我   们   试   一   下","我们发现不行，其实我们还差一步                                                             需要在我们的  hosts  文件中添加这个对应代码，添加之后保存，                      我们再来试试","完美成功访问。                       也就是说在  tomcat  中的  conf  中的  server.xml  中的  Host  就                      代表主机","8.1、配置自己的虚拟主机                        接下来，我们就来配置一下自己的虚拟主机，是这个样子的                                       然后我们将原本的哪个虚拟机主机的名字还改为  localhost                                                                                                                  对了，可不要忘记这个","接下来，该让我们的虚拟主机显示点什么呢？                                        我们在  D  盘下新建一个文件夹就叫百度，然后里面有一个                      html，就是显示一行字“我的百度呢？”  然后将路径配置在我们                      虚拟主机中的  docBase，是这个样子的                                     好了，然后重启  tomcat  服务器然后我们输                      入  localhost","然后再输入  ithuanqging                                          完美！这个时候你再想想，我们的主机名字是不是可以随便修改啊，                      如果改成  www.baidu.com  是不是可以呢？我们试试                                                                                            另  外  别  忘                      了修改  hosts  文件","然                      后重启  tomcat，输入  http://www.baidu.com                                         怎么样，是不是很。。。。好吧，其实没啥技术含量，不过这                      里有几个问题，首先，我们在我们电脑中的  hosts  文件中分别                      将  localhost  和  ithuangqing  还         有    www.baidu.com  都对应着                      127.0.0.1，还记的我们之前说输入  localhost  和输入  127.0.0.1                     是  同  样   的  效  果  吗   ？  那  个  时  候   我  们    hosts  文   件  中  只   有  一  个                      localhost  对应着  127.0.0.1，可是现在，你猜在浏览器输入                       127.0.0.1     会 出 现 什 么 ？ 我 们 来 试 试 吧                                     ！","你会说，这不还跟之前一样吗？好吧，确实跟之前一样，可是                      我们要往更深层理解，为什么输入  127.0.0.1  会显示  tomcat  的                      东西而不是我们自定义的内容呢？毕竟我们都对应着  127.0.0.1                      啊 ，所以肯 定有个设 置什么的 ，对我 们继续来 看我们的                     server.xml                                              我们可以找到这行配置，对，就是这个  defaulthost，它所对应                      的主机名字就是输入  127.0.0.1  会显示的主机所配置的内容，为                      什么我们输入  127.0.0.1  会出现  tomcat  的内容，就是因为我们","配置的虚拟主机有一个叫  localhost  的而这个默认的主机也叫                      localhost，所以  localhost  和  127.0.0.1  是一样的，因此如果我                      们 将 这个 默认 的主 机 名字 改成   www.baidu.com  那 么 输入                      127.0.0.1  和输入  www.baidu.com  就会显示                       一样的内容，因为此时两者是相同的。我们来验证一下                                          重启  tomcat  输入  127.0.0.1                                            看见没，这正是我们自定义的内容，也就是说现在  127.0.0.1  就                      等同                        于  www.baidu.com，另外我们的  hosts  文件中  ithuangqing  还                      对应这","127.0.0.1，是不是输入  ithuangqing  也会显示相同的内容                                          答案是正确的，还是因为此时的  127.0.0.1  已经默认对应这这个                     叫                        www.baidu.com  的虚拟机主机了。                        理解最重要，就到这了。                                                          原创不易                              原创不易，如果觉得对你有用，那就请我喝杯咖啡吧！","纳尼！没有咖啡！那就关注下我的公众号，也是对我一种支持！                                                    二、Maven                         一个自学的程序员 Maven 教程笔记                                                               上","声明：                      因为 maven 的知识体系还是比较多的，高级知识也有很多，                      比如后面的插件，聚合和继承，私服搭建等！所以关于 maven                      本次教程主要针对于初级阶段，即本教程的目的是让你达到                      一个认识 maven，会基本使用 maven 的目的！一些高级 maven                      知识可能不会涉及，还请须知！其实对于 maven，前期咱们                      做到基本的使用就行了，真是到后期大家学有余力，再钻研                      高级知识也不迟！                        什么是 maven？                       Maven 这个词是专家的意思，也可以翻译成“行家”，”内                      行”！是一个跨平台的项目管理工具，先有一个大体的认识！                      maven 主要就是为 Java 服务的，包括 Java 的项目构建，依赖                      管理和项目信息管理配置！                        维基百科                       Apache Maven，是一个软件（特别是 Java 软件）项目管理及                      自动构建工具，由 Apache 软件基金会所提供。基于项目对象                      模型（缩写：POM）概念，Maven 利用一个中央信息片断能                      管理一个项目的构建、报告和文档等步骤。                     Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，                      Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项","目，现为由 Apache 软件基金会主持的独立 Apache 项目。                           在此之前，先讲讲什么是构建，构建其实就是项目的编译，                      运行，单元测试，生成文档，打包部署等这些工作，如果这                      些操作都需要手动的话，那我们的日常好多时间都会浪费在                      这些重复性工作上，因此必然有一款工具可以帮助我们自动                      化的完成处理这些事情，那么 maven 就是一款非常优秀的项                      目自动化构建工具。                         1.2、大白话 maven                       当我们的项目中需要使用一些第三方 jar 包的时候。你都是                      怎么操作的？下载？然后复制？总之就是手动，不过有了                      maven 可以帮你自动完成！                         Maven 其实跟 Android 中用的 Gradle 是一样的，帮助我们自                      动化构建项目，快速方便的导入一些第三方 jar 包。其实在                      我目前看来或者说当你初次使用 maven 之后，你能感受到                     maven 带来的最大好处就是管理 jar 包太方便了，再也不用手                      动下载 jar 包了！                         我们平常在开发项目中都会用到一些第三方 jar 包，比如书","数据库链接驱动，还记得我们之前使用 mysql 的时候需要导                      入这么一个 jar 包吗？                                   这是 MySQL 数据库 JDBC 驱动，我们在没有使用 maven 的                      时候是怎么操作的呢？通常是这个 jar 包已经准备好或者重                      新下载，然后将 jar 包拷贝到 lib 目录下，然后 build path。                           1.3、不使用 maven 的极端                       也就是说如果我们不使用 maven 的话，那么我们只能手动的                      去操作这些 jar 包，这可是个大问题，我们试想一下，现在                      你只是操作一个 jar 包，下载，手动复制，也许你觉得并没                      有什么，但是，如果是成千上百个 jar 包呢？还得一个个的                      手动下载，然后复制吗？这显然是不科学的，也没有人愿意                      这么干！                     而且我们还要知道一点就是有时候一个 jar 包的使用是需要                      依赖其他 jar 包的，也就是说你使用一个 jar 包的同时还需要                      下载其他 jar 包，那么你再想一想，如果你知道这个 jar 包都                      需要依赖哪些 jar 包还好，不就是麻烦点嘛。至少我们还知","道去下载什么 jar 包，但是如果你要是不知道这个 jar 包需要                      依赖什么 jar 包呢？这就苦恼了吧？如果是很多个 jar 包需要                     用，而这些 jar 包又需要依赖其他的一些 jar 包，而这些 jar                      包你又不是很清楚，而且万一出错呢？好吧！你也许只能说                      句我尽力了吧！                          1.4、使用 maven 的好处                      基于上面所说的那些情况，如果单纯的靠手动去操作 jar 包                      显然是不合理的，因为重复性的工作给我们带来了巨大的工                      作量，可以说是耗时耗力，那么使用 maven 就可以轻松帮你                      搞定这些！                         如果你使用了 maven，那么你就再也不用手动的去下载拷贝                      jar 包了，而且在使用 jar 包的时候你也不用考虑一个 jar 包需                      要依赖哪些 jar 包，maven 会统统帮你搞定！会帮你自动下载                      这个 jar 包以及其所需要依赖的 jar 包。节省你的开发时间，                      提高你的开发效率！","如何使用 Maven?                        2.1、使用 maven 的前提                       在我们使用 maven 之前我们需要做一下提前准备，那就是 jdk                      的安装，不过我觉得这个大家都已经搞定了，这里说一下如                      何检验自己的 jdk 安装是否成功，可以在命令行界面输入以                      下命令！                                                使   用     echo  %JAVA_HOME% 来                  查   看   我   们    的   环 境 变 量                      JAVA_HOME 是否指向了正确的 jdk 安装路径，然后我们再                      执行 Java 命令，看是否能够成功执行？                           2.2、安装和配置                       安装好了 jdk，下一步我们就应该进行 maven 的安装和配置                      了，接下来我们按照步骤进行操作，首先是下载 maven！","2.2.1、下载 maven                       我们可以直接搜索 maven，找到 maven 的官网                                               点击进入 maven 的官方网站                                                在左侧有一个 download，点击进入下载页面，进入之后需要                      往下翻，找到如下图所示","这就是我们需要的 maven 安装包了，点击下载即可！                         2.2.2、解压配置                       下载完成之后我们将下载的 maven 压缩包解压到特定目录                      下，如图                                                 当你完成了以上的操作我们就可以去配置 maven 了，也就是                      配置 maven 的环境变量，这个大家想必也都知道怎么配置，","接下来在配置的过程中顺带说几个问题，说不定这也是有些                      人的一个小疑惑，我们首先需要将 maven 的 bin 配置到系统                     的环境变量下，也就是在 path 中添加 maven 的 bin 路径，这                      是 maven 的 bin 路径                                            然后打开系统的环境变量配置                                                     点击新建，将刚才复制的 bin 路径添加进去","然后点击确定，一般来说，这个时候 maven 的配置就成功了，                      我们同样来测试一下                                      如果是这样的话，我们的配置就是成功的，不过这个时候你                      应该想知道 MAVEN_HOME 是怎么回事吧！                         首先，我们需要知道这个环境配置到底是怎么回事，我们拿                      大家熟悉的 Java 中的配置来说，就拿 JAVA_HOME 来说，                      这是一个系统默认的变量名，当一些程序什么的需要用到                      Java 的 jdk 的 时 候 就 会 去 系 统 环 境 变 量 中 取 这 个                      JAVA_HOME 的值，而我们也知道这个 JAVA_HOME 就是                      jdk 的安装路径，当我们需要用到 jdk 中的 bin 中的一些命令","时就回去系统环境变量中的 path 中找到这些命令的路径以                      便使用，当我们把这些命令所在的路径添加到 path 中，那么                     任何地方需要用到这些命令的时候都会去这个 path 中找到                      这个路径去使用这个路径下的相关命令，如果你不这样做，                      那么在其他地方你是无法使用这些命令的，比如我是这样配                      置的                                       那么我可以在任何地方使用这个 bin 下的命令，但是一般不                      这样配置，因为我们之前配置了 JAVA_HOME 再配置这个路                      径的时候我们可以利用上这个 JAVA_HOME，因此正确的做                      法应该是这个样子的                                       这里我们使用%%来引用我们配置的 JAVA_HOME，其实就                      等价于它","这样配置有什么好处呢？这样配置的话当我们下载需要更                      新 jdk 的时候我们就只需要更改 JAVA_HOME 的值，而这个                      path 就不用再变动了！                         同理，这个 MAVEN_HOME 是一样的道理，所以我们需要                      新建一个 MAVEN_HOME                                                      然后在 path 中引用","接下来我们测试一下                                               配置完美成功！                             2.3、在 eclipse 中初步配置 maven                       我们到现在已经基本知道什么是 maven 以及 maven 可以为我","们做什么，而且我们也已经安装好 maven 了，接下我们就在                      eclipse 中实际操作一下如何使用 maven 吧！                        如果我们需要在 eclipse 中使用 maven 的话，那么我们需要让                      eclipse 关联到我们的 maven 的，在以前的老版本 eclipse 中是                      需要下载安装一个 maven 插件，不过现在新版本的 eclipse 中                      都自己集成了 maven，我们可以如下图所示打开","我们需要在这个 Installations 中添加我们下载安装的 maven 文                      件！点击 add 进行添加之后 finish。然后点击 Apply 应用！然                      后呢？这样就可以了吗？当然不是。                                  其实到这里我们知识做了 eclipse 中 maven 最基本的配置，让                      eclipse 和我们的 maven 关联上，接下来还有一些列的配置，                      我们慢慢来！","2.4、maven 的核心配置                       学习 maven 其实也是一个配置的过程，而它最核心的配置文                      件则是 pom.xml 这个文件，我们先把这个记住！一个项目如                      果项目中含有 pom.xml 这个文件，我们一般就把它称为是一                      个 maven 项目，eclipse 判定是不是一个 maven 项目也是根据                     pom.xml 文件来进行判定的！                            2.4.1、maven 项目的结构                       Maven 项目不同于一般的 Java 项目，它有着自己特定的目录                      结构，一般是这个样子的                                         也就是说如果你创建一个 maven 项目，它应该包含以上内容，                      我们可以看到里面有一个 pom.xml 文件，这是一个核心文件！                      那么这个文件有什么用呢？","2.5、maven 的依赖和坐标                       我们之前一直在强调这个 pom.xml 是个核心配置文件，我们                      之前也一直在说 maven 可以让我们的 jar 包使用起来更加方                      便，这到底是怎么回事呢？                         我们说过，使用 maven 可以帮助我们自动下载需要的 jar 包，                      那究竟是如何帮助我们下载 jar 包的呢？                         那就要看这个 pom 了，我们想要什么 jar 包就需要在这个 pom                     中添加什么 jar 包，比如说我们需要一个测试的 jar 包，我们                      就可以在 pom 中添加这样的代码                       <dependency>                          <groupId>junit</groupId>                          <artifactId>junit</artifactId>                          <version>3.8.1</version>                          <scope>test</scope>                        </dependency>                     当你把这些代码放到 pom.xml 文件中去点击保存，maven 就                      会自动帮你去下载这个 junit 的 jar 包，然后你就可以直接用                      了！那么，这是什么意思呢？                         我们知道 jar 包可以让 maven 帮我们自动下载，但是你总该                      告诉 maven 你需要什么 jar 包吧！而这个告诉也不是随便告","诉的，你不可能说一句“喂，maven 你帮我下载一个 junit 的                      jar 包”，开什么玩笑，maven 又不是人肯定听不懂你说的，                     因此，你要要说一些 maven 能听得懂的， 那                                     maven 能听懂什                      么呢？好吧，其实 maven 什么也听不懂，但是它认识下面这                      种结构的代码                       <dependency>                          <groupId>junit</groupId>                          <artifactId>junit</artifactId>                          <version>3.8.1</version>                          <scope>test</scope>                        </dependency>                     这是一种标签的结构，最外层是一个 dependency，然后里面                      有几个元素，这是什么呢？你可以把它看作一种坐标，在                      maven 中对 jar 包的管理就是通过坐标的方式，为什么要用这                     种坐标的方式呢？因为这样可以唯一确定一个 jar 包，不会                      引起混乱，有的时候我们添加一个 jar 包也叫做添加一个依                      赖，比如这里就是添加 junit 的依赖，你可以这样理解依赖，                      在这个项目中需要使用到 junit，那么这个项目就对它产生了                      依赖，将这个 junit 添加到项目中就是添加了这个依赖！                         一个依赖主要靠 groupId，artifactId 和 version 这三个元素来                      唯一确定，这三个元素可以叫做一个依赖最基本的坐标，任                      何一个依赖都必须包含这三个元素，当然除了这个最基本的                      坐标，还有一些其他的元素，比如","这里我们可能会说一下 type 和 scope，其他的就不会再说了。                         到这里，你大致明白了什么是依赖和坐标以及 maven 如何帮                      助我们自动下载 jar 包的，可也许你还不明白这个坐标该如                      何使用，打开 pom 文件，也许你并不知道该将这些代码放到                      哪里，不着急我们继续往下看！                           2.6、我们来说说仓库                       我们通过之前的内容知道了maven如何帮助我们自动下载jar                      包了，可是又有新问题了，这个 jar 包 maven 是从哪里下载                      的呢？                         对的，就是仓库，一些 jar 包文件是存放在仓库中的，仓库                     分为远程仓库和本地仓库，想必这个不难理解，如果你本地                      仓库有你需要的 jar 包则会直接拿来用，如果没有 maven 则                      会从网上下载，然后下载到本地仓库再拿到项目中引用，也                      就是说当 maven 需要下载一个 jar 包的时候会首先从本地仓","库中去找，如果没有的话则会去远程仓库下载，然后下载到                      本地仓库再去引用。                        那么这个本地仓库在什么地方呢？当你在安装配置 maven 之                      后使用 mvn  –version 之后你的电脑这个位置就会出现如下                      文件夹！                                           也就是说只有当你使用了 maven 命令才会生成这个文件夹，                      这个文件夹就是我们的本地仓库了，当你使用 maven 自动下                      载 jar 包的时候会首先从这个文件夹中查找，如果没有的话                      则会去网上下载，而且会下载到这个文件夹之后再去引用，                      这个时候你可能会说这样不就是用了 C 盘吗》一般我们不会                      在系统盘放东西的，这会影响电脑速度，那么怎么办呢？                         其实这个仓库是可以改的，在此之前我们需要知道这些：                      首先，本地仓库由于刚创建一定是空的，那么当需要某个 jar","包的时候一定会去网上下载，那么去哪里下载呢？这里再                      maven 中默认配置了一个中央仓库，当本地仓库没有的话都                     会去这个中央仓库去下载，一般这个默认的中央仓库并不能                      满足我们，而且有的时候访问很慢，一般的我们都会再配置                      一个镜像                          2.7、什么是镜像                      说到这里，我们又提到了一个镜像，那什么是镜像呢？其实                      很好理解，比如我们有一个仓库叫做 a，还有一个仓库叫做 b，                      我们可以从仓库 b 中获取 a 仓库中所有的依赖构建，那么 b                      就叫做 a 的一个镜像。                         如果我们使用默认配置的中央仓库会出现访问速度慢以及                      一些依赖找不到等问题，所以呢？我们一般会再配置一个国                      内的 maven 镜像，这里提供一个阿里云的国内镜像                             <mirror>                               <id>alimaven</id>                               <name>aliyun maven</name>                               <url>http://maven.aliyun.com/nexus/content/groups/public/</url>                               <mirrorOf>central</mirrorOf>                            </mirror>                    这里的 mirrorOf 为 central，意思就是代替了中央仓库，以后                      再下载相关 jar 包就会去这个镜像上下载。","那么如何修改这个中央仓库呢？我们找到这个配置文件                                           打开，找到如下配置                                                        这就是配置镜像的标签，我们将阿里云的那个镜像配置在这                      里面","如此一来我们就将中央仓库成功替换到我们国内的阿里云                      镜像了，接下来我们再来看看如何修改我们的本地仓库吧！                      我们在这个配置文件的最前面可以找到如下所示                                                    这些注释掉的代码就是一些默认配置，我们可以在这里添加                      上我们的默认本地仓库地址，首先我们需要建立一个本地仓                      库","比如我在这里建立我们 maven 本地仓库，里面是空的，然后                      这样操作                                                       好了，到这里我们已经将本地仓库和中央仓库都进行修改","了，基本配置工作算是已经完成了，接下来我们继续完成                      eclipse 的配置。                             2.8、让 eclipse 知道你的仓库                       我们前面已经将本地仓库和中央仓库都做了修改，但是我们                     只是把 eclipse 与 maven 进行了最简单的关联，eclipse 可是不                      知道你的仓库做了修改的，因此我们还要继续配置                         按照下图操作","我们可以看到这里使用的设置文件还是最初的那个本地仓                     库的配置文件，因此我们需要修改成我们最新修改的设置文                      件，这样 eclipse 才知道真正的本地仓库和中央远程仓库。                                                               如此依赖仓库修改完成，eclipse 配置完成，接下来我们在                      eclipse 真正的体验一下吧！                            在 eclipse 中创建 maven 项目                       首先我们要明白使用 maven 搭建的项目一般都是 web 项目，","我们在使用 maven 搭建 web 项目的时候一般会遇到几个小问                      题，我们在实际操作中去解决这些问题！                     首先我们使用 eclipse 搭建一个 maven project                                                                      这里我们选择 maven  project，暂时不要管其他的！然后就来                      到了这一步","这一步就是开始创建 maven 项目了，这一步是让你选择的，                      选择什么呢？第一行代码代表的意思是问你要不要使用骨                      架搭建项目，我们之前也说过，maven 项目具有它特定的一                      些目录结构，就是需要哪些文件夹，需要怎么放置等等，这                      是一种风格一种规范，在这里就是骨架，如果第一行代码你                      没有勾选上，那就代表使用骨架创建，我们先来使用骨架创                      建项目，不要勾选！","3.1、使用骨架创建 maven 项目                                                                        这里就是要你选择具体使用哪个骨架进行项目的搭建，记住                      了我们选择这个 webapp 的，说明我们搭建的是一个 web 项                      目，这个一般在最后，记住要选择这个骨架，然后下一步","这里看着是不是很熟悉，我们需要写上我们这个项目的基本                      坐标，然后点击完成，我们就使用骨架成功创建了一个 maven                      项目。                            一般创建完成项目之后会有错误，像这样","我们把这个项目展开                                                     我们看到这个项目的报错是在 index.jsp，我们打开 Markers                      看看具体是什么错误","这里是因为缺少 servlet，那么怎么解决呢？这时候就要真正                      用到 maven 了，我们要使用 maven 来帮我们下载这个 servlet                     包，还记的怎么用吗？要在 pom.xml 中去用。                                               打开这个 pom.xml 中是这个样子的，我们看到已经有一个                     junit 了，我们还记得我们把 maven 的本地仓库和中央仓库都                      进行修改了吗？而且本地仓库还是空的，现在你再去看看","已经不再是空的了，多了很多的内容，这都是 maven 自己下                     载的，接下来我们去下载 servlet，不过这个 servlet 的坐标该                      怎么写呢？                                                      我们要记住这个网站，可以说使用 maven 必备，是什么？来                      你看看！","点击这个 Java servlet api                                                       这都是 servlet 的各个版本                                                       看到没，想必你也知道这个网站的强大了，我们复制这个坐","标然后到 pom 中                                                               这个时候点击保存按钮                                      这个时候再看之前的错误已经解决了，不过这里我们看还有                      一个警告，我们展开这个警告","这是一个 jdk 编译版本的问题，我们使用 maven 搭建 web 项                      目默认使用 jdk1.5                                               这个是要对项目的 jdk 编译版本进行修改的，这里有几个地                      方需要进行修改，首先是这个 JRE  系统库，我们鼠标点击到                      它","然后按住 alt+回车，出现这个                                                            这个时候成了这样","接下来我们继续修改一些内容，同样在我们的项目上单击，                     然后 alt+回车，出现这个（按照图示操作）","","然后之前的那个警告也就消失了！                           3.2、每次创建都要修改 jdk 版本？                       不过这个时候我们就要思考一下了，难道每次创建新的                      maven 项目之后都要进行 jdk 版本的手动修改吗？这样的话                      是不是有点麻烦了，有什么办法可以每次创建 maven 项目可                      以直接使用我们提前设置好的 jdk 版本呢？当然是有的！                                     我们打开 settings.xml，在里面找到 profiles 标签，然后在里面                      添加上如下代码","<profile>                                         <id>jdk-1.8</id>                                         <activation>                                             <activeByDefault>true</activeByDefault>                                             <jdk>1.8</jdk>                                         </activation>                                         <properties>                                             <maven.compiler.source>1.8</maven.compiler.source>                                             <maven.compiler.target>1.8</maven.compiler.target>                         <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>                                         </properties>                                     </profile>                      也就是这个样子的                                                然后保存即可，然后你下次再创建 maven 项目的时候就不需                      要再修改 jdk 的版本了，因为它自动变成 1.8 了。而且之前的                      那三个修改都不用再次修改了。","3.3、关于骨架创建项目的一些问题                       使用骨架创建 maven 项目的话存在一些问题，我们看这个使                      用骨架创建的项目结构目录。                                       我们之前说过 maven 项目是有一定的目录结构的，是这个样                     子的                                         这里可以看出来我们使用骨架创建的项目中缺少一些文件                      夹，那么缺少的这部分文件夹就需要我们自己手动创建了。                         另外大家要知道，我们创建的是 web 项目，一下内容是必须                      要有的。","在 eclipse 中就这样用！                       我们前面介绍了使用骨架去创建 maven 的 web 项目，一般大                      家不经常这样用，因为需要手动创建缺少的文件夹，一般我                      们创建 maven 的 web 项目都选择不适用骨架，也就是在创建                      maven 项目的时候这样做","接下来是这个样子的","我们再来看这样创建的目录结构                                         这样的目录结构看起来好多了，不过这里报了一个错，我们                      来看看是什么错误","是因为缺少了 web.xml 文件，不知道大家还记得之前用骨架                      创建项目的时候虽然少了几个文件夹，但是它为我们创建了                      一个 web.xml，我们把这个复制进来就行了，像这样                                                  如此一来项目就可以了。                          4.1、web.xml 哪里找？                       有的时候我们会说这个 web.xml 有点让人难受，一般我们都                      跳过骨架选择直接创建一个简单的 web 项目，但是这样没有","web.xml 这个文件，我们还需要自己去找，然后复制过来，                      总觉得这样不舒服，那么怎么做才舒服呢？其实我们可以这                     样，我们重新创建一个项目来看看如何操作.                                   我们使用无骨架的方式再创建一个项目，这里依然是有一个                      缺少 web.xml 的错误。那么我们如何添加这个 web.xml 呢？                      首先我们来看这个                                                           我们来看这个","","然后点击 ok，然后再 apply！                                     完美解决这个问题！                          4.2、其实不完美！                       我们以上的操作虽然解决了 web.xml 的问题，但是我们看这                      个目录结构","好像是这样，那该怎么办呢？我们可以这样做","这才是真正的完美解决！                            说明                        Maven 的教程笔记牵涉的内容稍微有点多，所以分成了上下                     部，这是上一部分，下一部会详细介绍下依赖还有使用 eclipse                      和 myeclipse 分别创建有无骨架的 web 项目会遇到的一些问                      题，也会结合大家的一些反馈增加相关内容，还会给大家介                      绍下这个东西","请持续关注微信公众号：一个自学的程序员，获取更多适合                      自学的原创自学教程笔记！                                 原创不易，可否请我喝杯咖啡！（熬夜写完的！）","当然，持续关注也是对我最大的支持！（扫一扫，关注我！）                                                 JavaEE"];